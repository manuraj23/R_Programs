}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Preprocess the data
df <- preprocess(df, region_df)
# Define UI
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
title = "Olympics Analysis",
radioButtons(
inputId = "user_menu",
label = "Select an Option",
choices = c(
"Medal Tally",
"Overall Analysis",
"Country-wise Performance",
"Athlete Wise Analysis"
)
)
),
mainPanel(
# Conditional panel based on user_menu selection
conditionalPanel(
condition = "input.user_menu == 'Medal Tally'",
fluidRow(
column(
width = 6,
titlePanel("Medal Tally"),
selectInput(
inputId = "selected_year",
label = "Select Year",
choices = c("Overall", unique(df$Year))
),
selectInput(
inputId = "selected_country",
label = "Select Country",
choices = c("Overall", unique(df$region))
)
),
column(
width = 6,
titlePanel("Medal Tally Output"),
tableOutput("medal_tally_table")
)
)
),
# More conditional panels for other options
# Implement as per the original Python code
)
)
)
# Define server logic
server <- function(input, output) {
# Function to fetch medal tally
fetch_medal_tally <- function(df, year, country) {
# Implement this function similarly to the Python code
}
# Output for medal tally table
output$medal_tally_table <- renderTable({
# Call fetch_medal_tally function with input parameters
fetch_medal_tally(df, input$selected_year, input$selected_country)
})
# Implement similar server logic for other options
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
titlePanel("Olympics Analysis"),
sidebarLayout(
position = "top",
sidebarPanel(
title = "Olympics Analysis",
radioButtons(
inputId = "user_menu",
label = "Select an Option",
choices = c(
"Medal Tally",
"Overall Analysis",
"Country-wise Performance",
"Athlete Wise Analysis"
)
)
),
mainPanel(
# Conditional panel based on user_menu selection
conditionalPanel(
condition = "input.user_menu == 'Medal Tally'",
fluidRow(
column(
width = 6,
titlePanel("Medal Tally"),
selectInput(
inputId = "selected_year",
label = "Select Year",
choices = c("Overall", unique(df$Year))
),
selectInput(
inputId = "selected_country",
label = "Select Country",
choices = c("Overall", unique(df$region))
)
),
column(
width = 6,
titlePanel("Medal Tally Output"),
tableOutput("medal_tally_table")
)
)
),
# More conditional panels for other options
# Implement as per the original Python code
)
)
)
View(df)
# Read the CSV files
df <- read.csv(file.choose())
View(df)
ui <- fluidPage(
titlePanel("Olympic Data Analysis"),
sidebarLayout(
position = "top",
sidebarPanel(
title = "Olympics Analysis",
radioButtons(
inputId = "user_menu",
label = "Select an Option",
choices = c(
"Medal Tally",
"Overall Analysis",
"Country-wise Performance",
"Athlete Wise Analysis"
)
)
),
mainPanel(
# Conditional panel based on user_menu selection
conditionalPanel(
condition = "input.user_menu == 'Medal Tally'",
fluidRow(
column(
width = 6,
titlePanel("Medal Tally"),
selectInput(
inputId = "selected_year",
label = "Select Year",
choices = c("Overall", unique(df$Year))
),
selectInput(
inputId = "selected_country",
label = "Select Country",
choices = c("Overall", unique(df$region))
)
),
column(
width = 6,
titlePanel("Medal Tally Output"),
tableOutput("medal_tally_table")
)
)
),
# More conditional panels for other options
# Implement as per the original Python code
)
)
)
ui <- fluidPage(
titlePanel("Olympic Data Analysis"),
sidebarLayout(
position = "top",
sidebarPanel(
title = "Olympics Analysis",
radioButtons(
inputId = "user_menu",
label = "Select an Option",
choices = c(
"Medal Tally",
"Overall Analysis",
"Country-wise Performance",
"Athlete Wise Analysis"
)
)
),
mainPanel(
# Conditional panel based on user_menu selection
conditionalPanel(
condition = "input.user_menu == 'Medal Tally'",
fluidRow(
column(
width = 6,
titlePanel("Medal Tally"),
selectInput(
inputId = "selected_year",
label = "Select Year",
choices = c("Overall", unique(df$Year))
),
selectInput(
inputId = "selected_country",
label = "Select Country",
choices = c("Overall", unique(df$region))
)
),
column(
width = 6,
titlePanel("Medal Tally Output"),
tableOutput("medal_tally_table")
)
)
),
# More conditional panels for other options
# Implement as per the original Python code
)
)
)
# Define server logic
server <- function(input, output) {
# Function to fetch medal tally
fetch_medal_tally <- function(df, year, country) {
# Implement this function similarly to the Python code
}
# Output for medal tally table
output$medal_tally_table <- renderTable({
# Call fetch_medal_tally function with input parameters
fetch_medal_tally(df, input$selected_year, input$selected_country)
})
# Implement similar server logic for other options
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(plotly)
library(ggplot2)
df <- read.csv(file.choose())
View(df)
ui <- fluidPage(
titlePanel("Olympic Data Analysis"),
)
server <- function(input, output) {
shinyApp(ui = ui, server = server)
df <- read.csv(file.choose())
ui <- fluidPage(
titlePanel("Olympic Data Analysis"),
)
library(shiny)
library(dplyr)
library(plotly)
library(ggplot2)
ui <- fluidPage(
titlePanel("Olympic Data Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("selected_year", "Select Year", choices = unique(df$year)),
selectInput("selected_country", "Select Country", choices = unique(df$country))
),
mainPanel(
tableOutput("medal_tally_table")
)
)
)
server <- function(input, output) {
fetch_medal_tally <- reactive({
filtered_df <- df %>%
filter(year == input$selected_year, country == input$selected_country)
return(filtered_df)
})
output$medal_tally_table <- renderTable({
fetch_medal_tally()
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(plotly)
library(ggplot2)
ui <- fluidPage(
tags$head(
tags$style(
HTML("
.title {
text-align: center;
}
")
)
),
titlePanel("Olympic Data Analysis", "title"),
sidebarLayout(
sidebarPanel(
selectInput("selected_year", "Select Year", choices = unique(df$year)),
selectInput("selected_country", "Select Country", choices = unique(df$country))
),
mainPanel(
tableOutput("medal_tally_table")
)
)
)
server <- function(input, output) {
fetch_medal_tally <- reactive({
filtered_df <- df %>%
filter(year == input$selected_year, country == input$selected_country)
return(filtered_df)
})
output$medal_tally_table <- renderTable({
fetch_medal_tally()
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(plotly)
library(ggplot2)
ui <- fluidPage(
titlePanel("Olympic Data Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("selected_year", "Select Year", choices = unique(df$year)),
selectInput("selected_country", "Select Country", choices = unique(df$country))
),
mainPanel(
tableOutput("medal_tally_table")
)
)
)
server <- function(input, output) {
fetch_medal_tally <- reactive({
filtered_df <- df %>%
filter(year == input$selected_year, country == input$selected_country)
return(filtered_df)
})
output$medal_tally_table <- renderTable({
fetch_medal_tally()
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
installed.packages("shinydashboard")
install.packages("shinydashboard", dependencies = TRUE)
install.packages("shiny", dependencies = TRUE)
install.packages("shiny", dependencies = TRUE)
install.packages("shiny", dependencies = TRUE)
install.packages("shiny", dependencies = TRUE)
library(shiny)
library(shinydashboard)
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "Olympic Data Analysis"),
dashboardSidebar(
width = "15%",
style = "background-color: #007bff;" # Blue color for sidebar
),
dashboardBody(
# Your content here
)
)
# Define server logic
server <- function(input, output) {
# Server logic here
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "Olympic Data Analysis", titleWidth = 300),
dashboardSidebar(
sidebarMenu(
menuItem("Hi", tabName = "hi"),
menuItem("Hello", tabName = "hello"),
menuItem("Hai", tabName = "hai"),
menuItem("How", tabName = "how")
)
),
dashboardBody(
# Centered heading
tags$head(tags$style(HTML(".content-wrapper {margin: 0 auto !important;}"))),
tabItems(
tabItem(tabName = "hi",
h2("Hi Tab Content")),
tabItem(tabName = "hello",
h2("Hello Tab Content")),
tabItem(tabName = "hai",
h2("Hai Tab Content")),
tabItem(tabName = "how",
h2("How Tab Content"))
)
)
)
# Define server logic
server <- function(input, output) {
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("Sidebar Dashboard"),
sidebarLayout(
sidebarPanel(
actionButton("btn1", "Button 1"),
actionButton("btn2", "Button 2"),
actionButton("btn3", "Button 3"),
actionButton("btn4", "Button 4"),
actionButton("btn5", "Button 5"),
actionButton("btn6", "Button 6"),
actionButton("btn7", "Button 7"),
actionButton("btn8", "Button 8"),
actionButton("btn9", "Button 9"),
actionButton("btn10", "Button 10")
),
mainPanel(
textOutput("clicked_button")
)
)
)
server <- function(input, output) {
observeEvent(input$btn1, {
output$clicked_button <- renderText({
"Button 1 clicked!"
})
})
observeEvent(input$btn2, {
output$clicked_button <- renderText({
"Button 2 clicked!"
})
})
observeEvent(input$btn3, {
output$clicked_button <- renderText({
"Button 3 clicked!"
})
})
observeEvent(input$btn4, {
output$clicked_button <- renderText({
"Button 4 clicked!"
})
})
observeEvent(input$btn5, {
output$clicked_button <- renderText({
"Button 5 clicked!"
})
})
observeEvent(input$btn6, {
output$clicked_button <- renderText({
"Button 6 clicked!"
})
})
observeEvent(input$btn7, {
output$clicked_button <- renderText({
"Button 7 clicked!"
})
})
observeEvent(input$btn8, {
output$clicked_button <- renderText({
"Button 8 clicked!"
})
})
observeEvent(input$btn9, {
output$clicked_button <- renderText({
"Button 9 clicked!"
})
})
observeEvent(input$btn10, {
output$clicked_button <- renderText({
"Button 10 clicked!"
})
})
}
shinyApp(ui = ui, server = server)
runApp('D:/R program/dummy.R')
runApp('D:/R program/dummy.R')
runApp('D:/R program/dummy.R')
# Define UI
ui <- fluidPage(
# Application title
titlePanel("Dashboard with Side Panel"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel (15% width)
sidebarPanel(
# Add sidebar content here
# For example, you can add input controls like sliders, dropdowns, etc.
h4("Sidebar Panel"),
# Add your input controls here
),
# Main panel (85% width)
mainPanel(
# Output
h4("Main Panel"),
# Add main panel content here
# For example, you can display plots, tables, etc.
)
)
)
# Define server logic
server <- function(input, output) {
# Server logic goes here
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('D:/R program/dummy.R')
runApp('D:/R program/dummy.R')
runApp('D:/R program/dummy.R')
runApp('D:/R program/dummy.R')
runApp('D:/R program/dummy.R')
